//*****************************************************************************
//
//! \defgroup LM3Sxxxx_WDT LM3Sxxxx WDT
//! 
//! \brief Texas Instruments LM3Sxxxx WDT Peripheral Driver.
//!
//! The CoX Peripheral Library also provides APIs for full functions of Stellaris
//! LM3Sxxxx WDT. This module supports the whole LM3Sxxxx Series.
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref LM3Sxxxx_WDT_Blcok
//! - \ref LM3Sxxxx_WDT_Function_Desc
//! - \ref LM3Sxxxx_WDT_API_Group
//!   - \ref LM3Sxxxx_WDT_API_Group_Config
//!   - \ref LM3Sxxxx_WDT_API_Group_Function
//!   .
//! - \ref LM3Sxxxx_WDT_Usage
//! .
//!
//! <br />
//! \section LM3Sxxxx_WDT_Blcok 1. WDT Physical Block
//! <img src="Watchdog_module_block.PNG" />
//! 
//! <br />
//! \section LM3Sxxxx_WDT_Function_Desc 2. Functional Description
//! WDT includes the following functions:
//! - Interrupt
//! - Restart
//! - Hold In ICE 
//! .
//! 
//! <br />
//! \section LM3Sxxxx_WDT_API_Group 3. API Groups
//! 
//! The WDT API is broken into two groups of functions : 
//! - those that deal with configuring the WDT
//! - those that deal with functions
//! .
//!
//! <br />
//! \subsection LM3Sxxxx_WDT_API_Group_Config 3.1 WDT Config APIs
//! 
//! The WDT are configured with :
//! - WDTimerInit()
//! .
//! 
//! <br />
//! \subsection LM3Sxxxx_WDT_API_Group_Function 3.2 WDT Function APIs
//! 
//! The WDT function are set with : 
//! - WDTimerIntCallbackInit()
//! - WDTimerFunctionEnable()
//! - WDTimerFunctionDisable() 
//! .
//!
//! <br />
//! \section LM3Sxxxx_WDT_Usage 4. Usage & Program Examples
//! The following example shows how to use the WDT API to initialize the 
//! WDT, achieve the WDT interrupt function.
//! 
//! \code
//!
//! #include <stdint.h>
//! #include "xhw_types.h"
//! #include "xhw_ints.h"
//! #include "xhw_memmap.h"
//! #include "xhw_sysctl.h"
//! #include "xhw_gpio.h"
//! #include "xhw_wdt.h"
//! #include "xhw_nvic.h"
//! #include "xdebug.h"
//! #include "xcore.h"
//! #include "xsysctl.h"
//! #include "xgpio.h"
//! #include "xwdt.h"
//! 
//! 
//! //
//! // Here is your interrupt Handler code for watchdog 0
//! //
//! static unsigned long WatchDog_0_Handler(void *pvCBData, 
//!                                        unsigned long ulEvent,
//!                                        unsigned long ulMsgParam,
//!                                        void *pvMsgData)
//! {
//!     // your code 
//! }
//! 
//! void Watchdog_Interrupt(void)
//! {
//!     unsigned long WdtBase = WATCHDOG0_BASE ; 
//!     unsigned long ReloadValue = 0xFFFF;
//! 
//!     //
//!     // Configure System Clock to 80MHz
//!     //
//!     SysCtlClockSet( SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | 
//!                     SYSCTL_XTAL_16MHZ | SYSCTL_OSC_MAIN );
//! 
//!     //
//!     // Enable watchdog clock
//!     //
//!     SysCtlPeripheralEnable(SYSCTL_PERIPH_WDOG0);
//! 
//!     //
//!     // Ensure watchdog is unlocked.
//!     //
//!     if(WatchdogLockState(WdtBase))
//!     {
//!         WatchdogUnlock(WdtBase);
//!     }
//! 
//!     //
//!     // don't reset mcu, when watchdog count reach to zero once again.
//!     //
//!     WatchdogResetDisable(WdtBase);
//! 
//!     //
//!     // set reload value and stop watchdog when in debug mode.
//!     //
//!     WatchdogReloadSet(WdtBase, ReloadValue);
//!     WatchdogStallEnable(WdtBase);
//!     
//!     //
//!     // register the user's handler routine
//!     //
//!     xWDTIntCallbackInit(WdtBase, WatchDog_0_Handler);
//! 
//!     //
//!     // configure interrupt
//!     // 
//!     WatchdogIntEnable(WdtBase);
//!     WatchdogEnable(WdtBase);
//!     xIntEnable(INT_WATCHDOG);
//!     xIntMasterEnable();
//! 
//!     while(1);
//! }
//!
//! \endcode
//! 
//! 
//
//*****************************************************************************


