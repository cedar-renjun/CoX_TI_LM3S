//*****************************************************************************
//
//! \defgroup PWM
//! 
//! \brief PWM Peripheral Driver.
//!
//! PWM is to generate continous pulse output signals or to 
//! capture pin's input signals. The PWM Generator has one 8-bit prescaler, one clock 
//! divider providing 5 divided frequencies (1, 1/2, 1/4, 1/8, 1/16), two PWM 
//! Timers including two clock selectors, two 16-bit PWM down-counters for PWM 
//! period control, two 16-bit comparators for PWM duty control and one dead-zone 
//! generator. The PWM interrupt flags will be set by hardware when the
//! corresponding PWM period down counter reaches zero. The PWM interrupt source with its corresponding 
//! enable bit can cause CPU to request PWM interrupt. The PWM generators can be 
//! configured as one-shot mode to produce only one PWM cycle signal or continuous
//! mode to output PWM waveform continuously.    
//!
//! <br />
//! <h1>Contents</h1>
//! - \ref PWM_Blcok
//! - \ref PWM_Function_Desc
//!   - \ref PWM_Output
//!   - \ref PWM_Capture
//!   - \ref PWM_Interrupt
//!   .
//! - \ref PWM_Applications
//! .
//! 
//! <br />
//! \section PWM_Blcok 1. PWM Physical Block
//! <img src="pwm_block.png" />
//!
//! <br />
//! \section PWM_Function_Desc 2. PWM Functional Description
//! 
//! <br />
//! \subsection PWM_Output 2.1 PWM Output 
//! When PWM channel output is enabled, PWM generator will output low level if 
//! current count value is larger than the CMR value, or high level if less. 
//! 
//! <br />
//! \subsection PWM_Capture 2.2 PWM Capture 
//! If Capture function is enabled, the PWM output pin will switch to captured input mode. 
//! After capture feature is enabled, the capture will always latch PWM counter to 
//! capture rising register when input channel has a rising transition, or to capture 
//! falling latch register when input channel has a falling transition.  
//! 
//! <br />
//! \subsection PWM_Interrupt 2.3 PWM Interrupt
//! If output function is enabled, the PWM interrupt request will generate with 
//! the corresponding bit enabled when the down counter reaches zero. And if capture
//! function is enabled, the PWM interrupt request will generate with the corresponding
//! bit enabled when input channel has a rising transition or a falling transition.
//!
//! <br />
//! \section PWM_Applications 3. PWM Applications
//! The PWM can be used to generate output, capture input, etc.
//! \note Here are descriptions of the common functions of the PWM Peripheral. 
//! The CoX Peripheral Interface is based on the functions above. 
//
//*****************************************************************************


//*****************************************************************************
//
//! \defgroup xPWM xPWM
//! 
//! \brief CoX PWM Peripheral Interface
//!
//! The xPWM is the PWM Peripheral Interface of CoX. It defines some common
//! macros and APIs.
//! 
//! <h1>Contents</h1>
//! - \ref CoX_PWM_How_Define
//! - \ref xPWM_API_Group
//!   - \ref xPWM_API_Group_Config
//!   - \ref xPWM_API_Group_Function
//!     - \ref xPWM_API_Group_Output
//!     - \ref xPWM_API_Group_Interrupt
//!     .
//!   .
//! - \ref xPWM_Usage 
//! .
//!
//! <br />
//!
//! \section CoX_PWM_How_Define 1. How is the xPWM Standard Defined? 
//! CoX PWM defines the APIs based on the following common functions:
//! - Set clock prescaler, divider and CNR
//! - Set mode, output inversion and deadzone
//! - Set duty
//! - Set PWM function.
//!   - Output
//!   - Interrupt
//!   .
//! .
//!
//! <br />
//! \section xPWM_API_Group 2. API Groups
//! 
//! The CoX PWM API is broken into two groups of functions: 
//! - those that deal with configuring PWM
//! - those that deal with PWM output and interrupt
//! .
//!
//! <br />
//! \subsection xPWM_API_Group_Config 2.1 2.1 PWM Configuration APIs
//! 
//! The PWM clock prescale, CNR and divider are configured with :
//! - xPWMInitConfigure() 
//! - xPWMFrequencyConfig()
//! - xPWMFrequencySet() 
//! .
//! 
//! The PWM duty is configured with :
//! - xPWMDutySet()
//! .
//!
//! <br />
//! \subsection xPWM_API_Group_Function 2.2 PWM Function APIs
//!
//! \subsubsection xPWM_API_Group_Output 2.2.1 PWM Output APIs
//!
//! The PWM output function can be configured with :
//! - xPWMOutputEnable()
//! - xPWMOutputDisable() 
//! .
//!
//! <br />
//! \subsubsection xPWM_API_Group_Interrupt 2.2.2 PWM Interrupt APIs
//! 
//! The PWM Interrupt function can be configured with :
//! - xPWMIntCallbackInit()
//! - xPWMIntEnable()
//! - xPWMIntDisable()
//! - xPWMIntFlagClear()
//! .
//!
//! <br />
//! \section xPWM_Usage 3. Usage & Program Examples
//! The following example shows how to use the PWM APIs to 
//! initialize the PWM, achieve interrupt functions with the PWM.
//!
//! \code
//!
//! unsigned long ulbase = xPWMB_BASE;
//! unsigned long ulchannel = xPWM_CHANNEL5;
//! unsigned long ulconfig = xPWM_TOGGLE_MODE|xPWM_OUTPUT_INVERTER_DIS |xPWM_DEAD_ZONE_DIS;
//!                                         
//! //
//! // Set invert, dead zone and mode.
//! //
//! xPWMInitConfigure(ulbase, ulchannel, ulconfig);
//!                   
//! //
//! // Set CNR, Prescale and Divider.
//! //
//! xPWMFrequencyConfig(ulbase, ulchannel, 0x3FF1111);
//!
//! //
//! // Set CMR.
//! //
//! xPWMDutySet(ulbase, ulchannel, 40);
//!
//! //
//! // Clear interrupt falg.
//! //
//! xPWMIntFlagClear(ulbase, ulchannel, xPWM_INT_PWM);
//!
//! //
//! // Set interrupt call back.
//! //
//! xPWMIntCallbackInit(ulbase, user_Callback1);
//!
//! //
//! // PWM output interrupt enable.
//! //
//! xPWMIntEnable(ulbase, ulchannel, xPWM_INT_PWM);
//!
//! // 
//! // NVIC interrupt enable.
//! //
//! xIntEnable(INT_PWMA);
//!
//! //
//! // Set GPIO Pin as PWM.
//! //
//! xSPinTypePWM(PWM5, PE5);
//!
//! //
//! // Set output enable and capture disable.
//! //
//! xPWMOutputEnable(ulbase, ulchannel);
//!
//! //
//! // Start PWM.
//! //
//! xPWMStart(ulbase, ulchannel);
//!
//! \endcode
//! \todo 
//!
//
//*****************************************************************************

//*****************************************************************************
//
//! \defgroup xPWM_Exported_APIs xPWM Exported APIs Refrence
//! 
//! \brief CoX PWM Peripheral Interface APIs Refrence.
//!
//
//*****************************************************************************

//*****************************************************************************
//
//! \defgroup xPWM_Int_Type xPWM Interrupt Type
//!
//! \brief Values that can be passed to \b xPWMIntEnable(), xPWMIntDisable().  
//! 
//! All the macros:
//! - \ref  xPWM_INT_PWM
//! .
//
//*****************************************************************************



//*****************************************************************************
//
//! \defgroup xPWM_Event_Type xPWM Event Type
//! 
//! \brief Values that can be passed to \b xPWMIntEnable(), xPWMIntDisable(). 
//!
//! All the two macros:
//! - \ref xPWM_EVENT_PWM
//! - \ref xPWM_EVENT_CAP
//! .
//
//*****************************************************************************

//*****************************************************************************
//
//! \defgroup xPWM_Channel xPWM Channel Type
//! 
//! \brief Values that can be passed to all the functions.
//!
//! All the eight macros:
//! - \ref xPWM_CHANNEL0
//! - \ref xPWM_CHANNEL1
//! - \ref xPWM_CHANNEL2
//! - \ref xPWM_CHANNEL3
//! - \ref xPWM_CHANNEL4
//! - \ref xPWM_CHANNEL5
//! - \ref xPWM_CHANNEL6
//! - \ref xPWM_CHANNEL7
//! .
//
//*****************************************************************************

//*****************************************************************************
//
//! \defgroup xPWM_Config xPWM Config Type
//! 
//! \brief Values that can be passed to \b xPWMInitConfigure(). 
//!
//! All the macros:
//! - \ref xPWM_ONE_SHOT_MODE
//! - \ref xPWM_TOGGLE_MODE
//! - \ref xPWM_OUTPUT_INVERTER_EN
//! - \ref xPWM_OUTPUT_INVERTER_DIS
//! - \ref xPWM_DEAD_ZONE_EN
//! - \ref xPWM_DEAD_ZONE_DIS
//! .
//
//*****************************************************************************







